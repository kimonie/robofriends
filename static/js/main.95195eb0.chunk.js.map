{"version":3,"sources":["components/card/Card.js","components/cardList/CardList.js","components/searchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","monst","key","SearchBox","placeholder","handleChange","type","onChange","e","setState","searchField","target","value","state","bind","fetch","then","Response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVAEaA,G,MAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,MAAnB,QCAKC,G,MAAW,SAACR,GACrB,OACA,yBAAKC,UAAU,YACTD,EAAMI,QAAQK,IAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAMC,IAAMD,EAAML,GAAKD,QAAUM,SCLzDE,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACpB,2BACIC,KAAK,SACLF,YAAeA,EACfG,SAAWF,EACXb,UAAY,aCqCLF,G,kBAvCX,aAAgB,IAAD,8BACX,+CAgBJe,aAAe,SAACG,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACTlB,QAAS,GACTe,YAAa,IAGjB,EAAKL,aAAe,EAAKA,aAAaS,KAAlB,gBART,E,iFAWM,IAAD,OAChBC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEd,QAAUwB,Q,+BAOnC,IAAD,EAC4BC,KAAKP,MAA9BlB,EADH,EACGA,QAASe,EADZ,EACYA,YACXW,EAAmB1B,EAAQ2B,OAAO,SAAArB,GAAK,OACzCA,EAAMJ,KAAK0B,cAAcC,SAASd,EAAYa,iBAGlD,OACI,yBAAK/B,UAAU,OACX,2CACA,kBAAC,EAAD,CACIY,YAAY,kBACZC,aAAee,KAAKf,eACxB,kBAAC,EAAD,CAAUV,QAAU0B,S,GAlCjBI,cCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.95195eb0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=100x300`} />\r\n        <h1> {props.monster.name} </h1>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\n\r\nimport { Card } from '../card/Card';\r\n\r\nimport './CardList.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n    <div className='cardList'>\r\n        { props.monster.map(monst => <Card key={ monst.id } monster={ monst } />) }\r\n    </div>);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './SearchBox.css'\r\n\r\nexport const SearchBox =({ placeholder, handleChange }) => (\r\n    <input \r\n        type=\"search\" \r\n        placeholder= { placeholder } \r\n        onChange={ handleChange }\r\n        className = \"search\" />\r\n\r\n);","import React, { Component } from 'react';\r\nimport { CardList } from './components/cardList/CardList';\r\nimport { SearchBox } from './components/searchBox/SearchBox';\r\n\r\nimport './App.css';\r\n\r\nclass Card extends Component {\r\n    constructor () {\r\n        super();\r\n\r\n        this.state = {\r\n            monster: [],\r\n            searchField: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(Response => Response.json())\r\n        .then(users => this.setState({ monster : users }));\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ searchField: e.target.value });   \r\n    }\r\n\r\n    render() {\r\n        const { monster, searchField } = this.state;\r\n        const filteredMonsters = monster.filter(monst  => \r\n            monst.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n\r\n        return (\r\n            <div className='App'>\r\n                <h1>ROBOFRIENDS</h1>\r\n                <SearchBox \r\n                    placeholder=\"Search Monsters\" \r\n                    handleChange={ this.handleChange } />\r\n                <CardList monster={ filteredMonsters } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}